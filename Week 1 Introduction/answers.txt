# WRITEUP 2
- What is the type of argv? It is a char pointer.

- printf("char d = %c\n", d); 
  What does this print? The first value of c, "6".

- pcp = argv; 
  Why is this assignment valid? Because both are pointers.

- char const* pcc2 = c; 
  What is the type of pcc2? It is a constant pointer to a char.

- *pcc = '7';
  Invalid? Because this is read-only variable (a constant) and not assignable.

- pcc = *pcp; 
  Valid? Because the pointer to the value can change.
- pcc = argv[0]; 
  Valid? Because argv[0] is a pointer as well.

- cp = *pcp; 
  Invalid? Because cp is a const pointer and not a double pointer to char.

- cp = *argv; 
  Invalid? Same here.

- *cp = '!';
  Valid? Because only the pointer needs to remain constant.

- cpc = *pcp;
  Invalid? Because nothing can be altered after declaration.

- cpc = argv[0];
  Invalid? Because nothing can be altered after declaration.

- *cpc = '@'; 
  Invalid? Because nothing can be altered after declaration.


# WRITEUP 3
size of int : 4 bytes 
size of int* : 8 bytes 
size of short : 2 bytes 
size of short* : 8 bytes 
size of long : 8 bytes 
size of long* : 8 bytes 
size of char : 1 bytes 
size of char* : 8 bytes 
size of float : 4 bytes 
size of float* : 8 bytes 
size of double : 8 bytes 
size of double* : 8 bytes 
size of unsigned int : 4 bytes 
size of unsigned int* : 8 bytes 
size of long long : 8 bytes 
size of long long* : 8 bytes 
size of int8_t : 1 bytes 
size of int8_t* : 8 bytes 
size of int16_t : 2 bytes 
size of int16_t* : 8 bytes 
size of int32_t : 4 bytes 
size of int32_t* : 8 bytes 
size of int64_t : 8 bytes 
size of int64_t* : 8 bytes 
size of int_fast8_t : 1 bytes 
size of int_fast8_t* : 8 bytes 
size of int_fast16_t : 2 bytes 
size of int_fast16_t* : 8 bytes 
size of int_fast32_t : 4 bytes 
size of int_fast32_t* : 8 bytes 
size of int_fast64_t : 8 bytes 
size of int_fast64_t* : 8 bytes 
size of uint8_t : 1 bytes 
size of uint8_t* : 8 bytes 
size of uint16_t : 2 bytes 
size of uint16_t* : 8 bytes 
size of uint32_t : 4 bytes 
size of uint32_t* : 8 bytes 
size of uint64_t : 8 bytes 
size of uint64_t* : 8 bytes 
size of uint_fast8_t : 1 bytes 
size of uint_fast8_t* : 8 bytes 
size of uint_fast16_t : 2 bytes 
size of uint_fast16_t* : 8 bytes 
size of uint_fast32_t : 4 bytes 
size of uint_fast32_t* : 8 bytes 
size of uint_fast64_t : 8 bytes 
size of uint_fast64_t* : 8 bytes 
size of student : 8 bytes 
size of student* : 8 bytes 
size of int array 4 : 20 bytes 


# WRITEUP 4

